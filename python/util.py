import numpy as np

from sympy import Symbol
from sympy import sympify
from sympy import re


def normalize_sensor_readings(readings_arr):
    arr = []

    for idx, r in enumerate(readings_arr):
        y = Symbol('y')

        if idx == 0:
            eq = "-0.333333333333333 * (1.82916915072354 * y + 0.5 * ((3.65833830144708 * y - 499.815170779873) ** 2 + 0.0701562915750405) ** 0.5 - 249.907585389936) ** (1 / 3) + 4.93832764258486 + 0.086605928669128 / (1.82916915072354 * y + 0.5 * ((3.65833830144708 * y - 499.815170779873) ** 2 + 0.0701562915750405) ** 0.5 - 249.907585389936) ** (1 / 3)"
            arr.append(sympify(eq).subs(y, r))

        elif idx == 1:
            eq = "-0.333333333333333*(0.763160274963821*y + 0.5*((1.52632054992764*y - 192.694561345423)**2 + 0.0238174524744121)**0.5 - 96.3472806727114)**(1/3) + 3.68427399903521 + 0.060416725569534/(0.763160274963821*y + 0.5*((1.52632054992764*y - 192.694561345423)**2 + 0.0238174524744121)**0.5 - 96.3472806727114)**(1/3)"
            arr.append(re(sympify(eq).subs(y, r)))

        elif idx == 2:
            eq = "-0.333333333333333*(1.78919408109397*y + 0.5*((3.57838816218793*y - 349.238691063886)**2 + 57.5486916958619)**0.5 - 174.619345531943)**(1/3) + 3.8704678928039 + 0.81071940174333/(1.78919408109397*y + 0.5*((3.57838816218793*y - 349.238691063886)**2 + 57.5486916958619)**0.5 - 174.619345531943)**(1/3)"
            arr.append(re(sympify(eq).subs(y, r)))

        elif idx == 3:
            eq = "-0.333333333333333*(1.21909312046377*y + 0.5*((2.43818624092753*y - 277.880290107932)**2 + 75.7899755285877)**0.5 - 138.940145053966)**(1/3) + 3.92628482501412 + 0.888647118747699/(1.21909312046377*y + 0.5*((2.43818624092753*y - 277.880290107932)**2 + 75.7899755285877)**0.5 - 138.940145053966)**(1/3)"
            arr.append(re(sympify(eq).subs(y, r)))

        elif idx == 4:
            eq = "-0.333333333333333*(0.845424171706991*y + 0.5*((1.69084834341398*y - 257.510595146522)**2 + 17.7302279875036)**0.5 - 128.755297573261)**(1/3) + 3.7320345450714 + 0.547558075238531/(0.845424171706991*y + 0.5*((1.69084834341398*y - 257.510595146522)**2 + 17.7302279875036)**0.5 - 128.755297573261)**(1/3)"
            arr.append(re(sympify(eq).subs(y, r)))

        elif idx == 5:
            eq = "0.333333333333333*(0.863639042601056*y + 0.5*((1.72727808520211*y - 225.912809417099)**2 + 10.789736861182)**0.5 - 112.956404708549)**(1/3) + 3.80055960563104 + 0.464011808150607/(0.863639042601056*y + 0.5*((1.72727808520211*y - 225.912809417099)**2 + 10.789736861182)**0.5 - 112.956404708549)**(1/3)"
            arr.append(re(sympify(eq).subs(y, r)))

        elif idx == 6:
            eq = "-0.333333333333333*(1.07551983893452*y + 0.5*((2.15103967786903*y - 345.467307178303)**2 + 508.489620550574)**0.5 - 172.733653589151)**(1/3) + 3.95136598744977 + 1.6760466884682/(1.07551983893452*y + 0.5*((2.15103967786903*y - 345.467307178303)**2 + 508.489620550574)**0.5 - 172.733653589151)**(1/3)"
            arr.append(re(sympify(eq).subs(y, r)))

        elif idx == 7:
            eq = "-0.333333333333333*(0.746116797106518*y + 0.5*((1.49223359421304*y - 216.805696908663)**2 - 2.33582673643365)**0.5 - 108.402848454331)**(1/3) + 3.66172529456183 - 0.278615724344765/(0.746116797106518*y + 0.5*((1.49223359421304*y - 216.805696908663)**2 - 2.33582673643365)**0.5 - 108.402848454331)**(1/3)"
            arr.append(re(sympify(eq).subs(y, r)))

        else:
            raise Exception("something went wrong idx=" + str(idx))

    def to_positive_float(n):
        try:
            n = float(n)
            return 0 if n < 0 else n

        except TypeError:
            raise TypeError('Encountered an imaginary number')

    return list(map(to_positive_float, arr))


def safe_arctan(x, y):
    if x == 0:
        if y > 0:
            return 3 / 2 * np.pi
        else:
            return np.pi / 2
    ang = np.arctan(y / x)
    if ang < 0:
        ang += 2 * np.pi
    if y < 0:
        ang += np.pi
    return ang

