import numpy as np

from sympy import Symbol
from sympy import sympify
from sympy import re, im


def normalize_sensor_readings(readings_arr):
    arr = []

    print "READINGS R: " + str(readings_arr)

    for idx, r in enumerate(readings_arr):
        y = Symbol('y')

        if idx == 0:
            eq = "-0.333333333333333*(1.05489353389334*y + 0.5*((2.10978706778668*y - 228.025473190865)**2 + 52.7683910644765)**0.5 - 114.012736595432)**(1/3) + 4.09092921794621 + 0.787619933592481/(1.05489353389334*y + 0.5*((2.10978706778668*y - 228.025473190865)**2 + 52.7683910644765)**0.5 - 114.012736595432)**(1/3)"
            solved = sympify(eq).subs(y, r)
            arr.append(re(solved) + im(solved).evalf())

        elif idx == 1:
            eq = "-0.333333333333333*(2.49820499344915*y + 0.5*((4.9964099868983*y - 654.05464368429)**2 - 4552.17135227556)**0.5 - 327.027321842145)**(1/3) + 5.71415970253472 - 3.48015255483768/(2.49820499344915*y + 0.5*((4.9964099868983*y - 654.05464368429)**2 - 4552.17135227556)**0.5 - 327.027321842145)**(1/3)"
            solved = sympify(eq).subs(y, r)
            arr.append(re(solved) + im(solved).evalf())

        elif idx == 2:
            eq = "-0.333333333333333*(0.80681308830121*y + 0.5*((1.61362617660242*y - 277.667879948999)**2 + 89.5260629436753)**0.5 - 138.833939974499)**(1/3) + 3.60021913441904 + 0.939381299239288/(0.80681308830121*y + 0.5*((1.61362617660242*y - 277.667879948999)**2 + 89.5260629436753)**0.5 - 138.833939974499)**(1/3)"
            solved = sympify(eq).subs(y, r)
            arr.append(re(solved) + im(solved).evalf())

        elif idx == 3:
            eq = "-0.333333333333333*(0.813221297446366*y + 0.5*((1.62644259489273*y - 244.209046550634)**2 + 14.077287454097)**0.5 - 122.104523275317)**(1/3) + 3.69062550099722 + 0.507027763879187/(0.813221297446366*y + 0.5*((1.62644259489273*y - 244.209046550634)**2 + 14.077287454097)**0.5 - 122.104523275317)**(1/3)"
            solved = sympify(eq).subs(y, r)
            arr.append(re(solved) + im(solved).evalf())

        elif idx == 4:
            eq = "-0.333333333333333*(0.92945760984812*y + 0.5*((1.85891521969624*y - 199.626931022404)**2 + 8.67972681703231)**0.5 - 99.8134655112019)**(1/3) + 3.94216249213977 + 0.431546336056804/(0.92945760984812*y + 0.5*((1.85891521969624*y - 199.626931022404)**2 + 8.67972681703231)**0.5 - 99.8134655112019)**(1/3)"
            solved = sympify(eq).subs(y, r)
            arr.append(re(solved) + im(solved).evalf())

        elif idx == 5:
            eq = "-0.333333333333333*(1.46838405965773*y + 0.5*((2.93676811931545*y - 439.144916355782)**2 + 31.4324338358655)**0.5 - 219.572458177891)**(1/3) + 4.52204280140124 + 0.662701700283462/(1.46838405965773*y + 0.5*((2.93676811931545*y - 439.144916355782)**2 + 31.4324338358655)**0.5 - 219.572458177891)**(1/3)"
            solved = sympify(eq).subs(y, r)
            arr.append(re(solved) + im(solved).evalf())

        elif idx == 6:
            eq = "-0.333333333333333*(1.18540633094789*y + 0.5*((2.37081266189577*y - 624.313273969406)**2 + 196.584928623404)**0.5 - 312.156636984703)**(1/3) + 3.95884737527623 + 1.22098076214061/(1.18540633094789*y + 0.5*((2.37081266189577*y - 624.313273969406)**2 + 196.584928623404)**0.5 - 312.156636984703)**(1/3)"
            solved = sympify(eq).subs(y, r)
            arr.append(re(solved) + im(solved).evalf())

        elif idx == 7:
            eq = "-0.333333333333333*(0.606425414166098*y + 0.5*((1.2128508283322*y - 164.119092369965)**2 - 70.8591691120812)**0.5 - 82.0595461849824)**(1/3) + 3.47995352235838 - 0.868941954947829/(0.606425414166098*y + 0.5*((1.2128508283322*y - 164.119092369965)**2 - 70.8591691120812)**0.5 - 82.0595461849824)**(1/3)"
            solved = sympify(eq).subs(y, r)
            arr.append(re(solved) + im(solved).evalf())
        else:
            raise Exception("something went wrong idx=" + str(idx))

    def to_positive_float(n):
        try:
            n = float(n)
            return 0 if n < 0 else n

        except TypeError:
            raise TypeError('Encountered an imaginary number')

    return list(map(to_positive_float, arr))


def degrees_to_rad(degrees):
    return degrees * np.pi / 180


def safe_arctan(x, y):
    if x == 0:
        if y > 0:
            return 3 / 2 * np.pi
        else:
            return np.pi / 2
    ang = np.arctan(y / x)
    if ang < 0:
        ang += 2 * np.pi
    if y < 0:
        ang += np.pi
    return ang

